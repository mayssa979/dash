import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qmqttclient.h"
        name: "QMqttClient"
        accessSemantics: "reference"
        prototype: "QObject"
        Enum {
            name: "ClientState"
            values: ["Disconnected", "Connecting", "Connected"]
        }
        Enum {
            name: "ClientError"
            values: [
                "NoError",
                "InvalidProtocolVersion",
                "IdRejected",
                "ServerUnavailable",
                "BadUsernameOrPassword",
                "NotAuthorized",
                "TransportInvalid",
                "ProtocolViolation",
                "UnknownError",
                "Mqtt5SpecificError"
            ]
        }
        Enum {
            name: "ProtocolVersion"
            values: ["MQTT_3_1", "MQTT_3_1_1", "MQTT_5_0"]
        }
        Property {
            name: "clientId"
            type: "QString"
            read: "clientId"
            write: "setClientId"
            notify: "clientIdChanged"
            index: 0
        }
        Property {
            name: "hostname"
            type: "QString"
            read: "hostname"
            write: "setHostname"
            notify: "hostnameChanged"
            index: 1
        }
        Property {
            name: "port"
            type: "ushort"
            read: "port"
            write: "setPort"
            notify: "portChanged"
            index: 2
        }
        Property {
            name: "keepAlive"
            type: "ushort"
            read: "keepAlive"
            write: "setKeepAlive"
            notify: "keepAliveChanged"
            index: 3
        }
        Property {
            name: "protocolVersion"
            type: "ProtocolVersion"
            read: "protocolVersion"
            write: "setProtocolVersion"
            notify: "protocolVersionChanged"
            index: 4
        }
        Property {
            name: "state"
            type: "ClientState"
            read: "state"
            write: "setState"
            notify: "stateChanged"
            index: 5
        }
        Property {
            name: "error"
            type: "ClientError"
            read: "error"
            write: "setError"
            notify: "errorChanged"
            index: 6
        }
        Property {
            name: "username"
            type: "QString"
            read: "username"
            write: "setUsername"
            notify: "usernameChanged"
            index: 7
        }
        Property {
            name: "password"
            type: "QString"
            read: "password"
            write: "setPassword"
            notify: "passwordChanged"
            index: 8
        }
        Property {
            name: "cleanSession"
            type: "bool"
            read: "cleanSession"
            write: "setCleanSession"
            notify: "cleanSessionChanged"
            index: 9
        }
        Property {
            name: "willTopic"
            type: "QString"
            read: "willTopic"
            write: "setWillTopic"
            notify: "willTopicChanged"
            index: 10
        }
        Property {
            name: "willMessage"
            type: "QByteArray"
            read: "willMessage"
            write: "setWillMessage"
            notify: "willMessageChanged"
            index: 11
        }
        Property {
            name: "willQoS"
            type: "quint8"
            read: "willQoS"
            write: "setWillQoS"
            notify: "willQoSChanged"
            index: 12
        }
        Property {
            name: "willRetain"
            type: "bool"
            read: "willRetain"
            write: "setWillRetain"
            notify: "willRetainChanged"
            index: 13
        }
        Property {
            name: "autoKeepAlive"
            type: "bool"
            read: "autoKeepAlive"
            write: "setAutoKeepAlive"
            notify: "autoKeepAliveChanged"
            index: 14
        }
        Signal { name: "connected" }
        Signal { name: "disconnected" }
        Signal {
            name: "messageReceived"
            Parameter { name: "message"; type: "QByteArray" }
            Parameter { name: "topic"; type: "QMqttTopicName" }
        }
        Signal {
            name: "messageReceived"
            isCloned: true
            Parameter { name: "message"; type: "QByteArray" }
        }
        Signal {
            name: "messageStatusChanged"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "s"; type: "QMqtt::MessageStatus" }
            Parameter { name: "properties"; type: "QMqttMessageStatusProperties" }
        }
        Signal {
            name: "messageSent"
            Parameter { name: "id"; type: "int" }
        }
        Signal { name: "pingResponseReceived" }
        Signal { name: "brokerSessionRestored" }
        Signal {
            name: "hostnameChanged"
            Parameter { name: "hostname"; type: "QString" }
        }
        Signal {
            name: "portChanged"
            Parameter { name: "port"; type: "ushort" }
        }
        Signal {
            name: "clientIdChanged"
            Parameter { name: "clientId"; type: "QString" }
        }
        Signal {
            name: "keepAliveChanged"
            Parameter { name: "keepAlive"; type: "ushort" }
        }
        Signal {
            name: "protocolVersionChanged"
            Parameter { name: "protocolVersion"; type: "ProtocolVersion" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "ClientState" }
        }
        Signal {
            name: "errorChanged"
            Parameter { name: "error"; type: "ClientError" }
        }
        Signal {
            name: "usernameChanged"
            Parameter { name: "username"; type: "QString" }
        }
        Signal {
            name: "passwordChanged"
            Parameter { name: "password"; type: "QString" }
        }
        Signal {
            name: "cleanSessionChanged"
            Parameter { name: "cleanSession"; type: "bool" }
        }
        Signal {
            name: "willTopicChanged"
            Parameter { name: "willTopic"; type: "QString" }
        }
        Signal {
            name: "willQoSChanged"
            Parameter { name: "willQoS"; type: "quint8" }
        }
        Signal {
            name: "willMessageChanged"
            Parameter { name: "willMessage"; type: "QByteArray" }
        }
        Signal {
            name: "willRetainChanged"
            Parameter { name: "willRetain"; type: "bool" }
        }
        Signal {
            name: "autoKeepAliveChanged"
            Parameter { name: "autoKeepAlive"; type: "bool" }
        }
        Signal {
            name: "authenticationRequested"
            Parameter { name: "p"; type: "QMqttAuthenticationProperties" }
        }
        Signal {
            name: "authenticationFinished"
            Parameter { name: "p"; type: "QMqttAuthenticationProperties" }
        }
        Method {
            name: "setHostname"
            Parameter { name: "hostname"; type: "QString" }
        }
        Method {
            name: "setPort"
            Parameter { name: "port"; type: "ushort" }
        }
        Method {
            name: "setClientId"
            Parameter { name: "clientId"; type: "QString" }
        }
        Method {
            name: "setKeepAlive"
            Parameter { name: "keepAlive"; type: "ushort" }
        }
        Method {
            name: "setProtocolVersion"
            Parameter { name: "protocolVersion"; type: "ProtocolVersion" }
        }
        Method {
            name: "setState"
            Parameter { name: "state"; type: "ClientState" }
        }
        Method {
            name: "setError"
            Parameter { name: "error"; type: "ClientError" }
        }
        Method {
            name: "setUsername"
            Parameter { name: "username"; type: "QString" }
        }
        Method {
            name: "setPassword"
            Parameter { name: "password"; type: "QString" }
        }
        Method {
            name: "setCleanSession"
            Parameter { name: "cleanSession"; type: "bool" }
        }
        Method {
            name: "setWillTopic"
            Parameter { name: "willTopic"; type: "QString" }
        }
        Method {
            name: "setWillQoS"
            Parameter { name: "willQoS"; type: "quint8" }
        }
        Method {
            name: "setWillMessage"
            Parameter { name: "willMessage"; type: "QByteArray" }
        }
        Method {
            name: "setWillRetain"
            Parameter { name: "willRetain"; type: "bool" }
        }
        Method {
            name: "setAutoKeepAlive"
            Parameter { name: "autoKeepAlive"; type: "bool" }
        }
        Method {
            name: "publish"
            type: "int"
            Parameter { name: "topic"; type: "QMqttTopicName" }
            Parameter { name: "message"; type: "QByteArray" }
            Parameter { name: "qos"; type: "quint8" }
            Parameter { name: "retain"; type: "bool" }
        }
        Method {
            name: "publish"
            type: "int"
            isCloned: true
            Parameter { name: "topic"; type: "QMqttTopicName" }
            Parameter { name: "message"; type: "QByteArray" }
            Parameter { name: "qos"; type: "quint8" }
        }
        Method {
            name: "publish"
            type: "int"
            isCloned: true
            Parameter { name: "topic"; type: "QMqttTopicName" }
            Parameter { name: "message"; type: "QByteArray" }
        }
        Method {
            name: "publish"
            type: "int"
            isCloned: true
            Parameter { name: "topic"; type: "QMqttTopicName" }
        }
        Method {
            name: "publish"
            type: "int"
            Parameter { name: "topic"; type: "QMqttTopicName" }
            Parameter { name: "properties"; type: "QMqttPublishProperties" }
            Parameter { name: "message"; type: "QByteArray" }
            Parameter { name: "qos"; type: "quint8" }
            Parameter { name: "retain"; type: "bool" }
        }
        Method {
            name: "publish"
            type: "int"
            isCloned: true
            Parameter { name: "topic"; type: "QMqttTopicName" }
            Parameter { name: "properties"; type: "QMqttPublishProperties" }
            Parameter { name: "message"; type: "QByteArray" }
            Parameter { name: "qos"; type: "quint8" }
        }
        Method {
            name: "publish"
            type: "int"
            isCloned: true
            Parameter { name: "topic"; type: "QMqttTopicName" }
            Parameter { name: "properties"; type: "QMqttPublishProperties" }
            Parameter { name: "message"; type: "QByteArray" }
        }
        Method {
            name: "publish"
            type: "int"
            isCloned: true
            Parameter { name: "topic"; type: "QMqttTopicName" }
            Parameter { name: "properties"; type: "QMqttPublishProperties" }
        }
        Method { name: "connectToHost" }
        Method { name: "disconnectFromHost" }
    }
    Component {
        file: "qmlmqttclient.h"
        name: "QmlMqttClient"
        accessSemantics: "reference"
        prototype: "QObject"
        extension: "QMqttClient"
        extensionIsNamespace: true
        exports: ["SmartDashboard/MqttClient 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "hostname"
            type: "QString"
            read: "hostname"
            write: "setHostname"
            notify: "hostnameChanged"
            index: 0
        }
        Property {
            name: "port"
            type: "int"
            read: "port"
            write: "setPort"
            notify: "portChanged"
            index: 1
        }
        Property {
            name: "state"
            type: "QMqttClient::ClientState"
            read: "state"
            write: "setState"
            notify: "stateChanged"
            index: 2
        }
        Signal { name: "hostnameChanged" }
        Signal { name: "portChanged" }
        Signal { name: "stateChanged" }
        Method { name: "connectToHost" }
        Method { name: "disconnectFromHost" }
        Method {
            name: "subscribe"
            type: "QmlMqttSubscription"
            isPointer: true
            Parameter { name: "topic"; type: "QString" }
        }
    }
}
